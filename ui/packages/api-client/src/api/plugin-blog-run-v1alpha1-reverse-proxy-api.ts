/* tslint:disable */
/* eslint-disable */
/**
 * Blog Next API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Configuration } from "../configuration";
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from "axios";
import globalAxios from "axios";
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from "../common";
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  RequestArgs,
  BaseAPI,
  RequiredError,
} from "../base";
// @ts-ignore
import { ReverseProxy } from "../models";
// @ts-ignore
import { ReverseProxyList } from "../models";
/**
 * PluginBlogRunV1alpha1ReverseProxyApi - axios parameter creator
 * @export
 */
export const PluginBlogRunV1alpha1ReverseProxyApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     * Create plugin.blog.run/v1alpha1/ReverseProxy
     * @param {ReverseProxy} [reverseProxy] Fresh reverseproxy
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createpluginBlogRunV1alpha1ReverseProxy: async (
      reverseProxy?: ReverseProxy,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/apis/plugin.blog.run/v1alpha1/reverseproxies`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication BasicAuth required
      // http basic authentication required
      setBasicAuthToObject(localVarRequestOptions, configuration);

      // authentication BearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        reverseProxy,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Delete plugin.blog.run/v1alpha1/ReverseProxy
     * @param {string} name Name of reverseproxy
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deletepluginBlogRunV1alpha1ReverseProxy: async (
      name: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'name' is not null or undefined
      assertParamExists(
        "deletepluginBlogRunV1alpha1ReverseProxy",
        "name",
        name
      );
      const localVarPath =
        `/apis/plugin.blog.run/v1alpha1/reverseproxies/{name}`.replace(
          `{${"name"}}`,
          encodeURIComponent(String(name))
        );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "DELETE",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication BasicAuth required
      // http basic authentication required
      setBasicAuthToObject(localVarRequestOptions, configuration);

      // authentication BearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Get plugin.blog.run/v1alpha1/ReverseProxy
     * @param {string} name Name of reverseproxy
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getpluginBlogRunV1alpha1ReverseProxy: async (
      name: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'name' is not null or undefined
      assertParamExists("getpluginBlogRunV1alpha1ReverseProxy", "name", name);
      const localVarPath =
        `/apis/plugin.blog.run/v1alpha1/reverseproxies/{name}`.replace(
          `{${"name"}}`,
          encodeURIComponent(String(name))
        );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication BasicAuth required
      // http basic authentication required
      setBasicAuthToObject(localVarRequestOptions, configuration);

      // authentication BearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * List plugin.blog.run/v1alpha1/ReverseProxy
     * @param {Array<string>} [fieldSelector] Field selector for filtering.
     * @param {Array<string>} [labelSelector] Label selector for filtering.
     * @param {number} [page] The page number. Zero indicates no page.
     * @param {number} [size] Size of one page. Zero indicates no limit.
     * @param {Array<string>} [sort] Sort property and direction of the list result. Support sorting based on attribute name path.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listpluginBlogRunV1alpha1ReverseProxy: async (
      fieldSelector?: Array<string>,
      labelSelector?: Array<string>,
      page?: number,
      size?: number,
      sort?: Array<string>,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/apis/plugin.blog.run/v1alpha1/reverseproxies`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication BasicAuth required
      // http basic authentication required
      setBasicAuthToObject(localVarRequestOptions, configuration);

      // authentication BearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      if (fieldSelector) {
        localVarQueryParameter["fieldSelector"] = fieldSelector;
      }

      if (labelSelector) {
        localVarQueryParameter["labelSelector"] = labelSelector;
      }

      if (page !== undefined) {
        localVarQueryParameter["page"] = page;
      }

      if (size !== undefined) {
        localVarQueryParameter["size"] = size;
      }

      if (sort) {
        localVarQueryParameter["sort"] = Array.from(sort);
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Update plugin.blog.run/v1alpha1/ReverseProxy
     * @param {string} name Name of reverseproxy
     * @param {ReverseProxy} [reverseProxy] Updated reverseproxy
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updatepluginBlogRunV1alpha1ReverseProxy: async (
      name: string,
      reverseProxy?: ReverseProxy,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'name' is not null or undefined
      assertParamExists(
        "updatepluginBlogRunV1alpha1ReverseProxy",
        "name",
        name
      );
      const localVarPath =
        `/apis/plugin.blog.run/v1alpha1/reverseproxies/{name}`.replace(
          `{${"name"}}`,
          encodeURIComponent(String(name))
        );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication BasicAuth required
      // http basic authentication required
      setBasicAuthToObject(localVarRequestOptions, configuration);

      // authentication BearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        reverseProxy,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * PluginBlogRunV1alpha1ReverseProxyApi - functional programming interface
 * @export
 */
export const PluginBlogRunV1alpha1ReverseProxyApiFp = function (
  configuration?: Configuration
) {
  const localVarAxiosParamCreator =
    PluginBlogRunV1alpha1ReverseProxyApiAxiosParamCreator(configuration);
  return {
    /**
     * Create plugin.blog.run/v1alpha1/ReverseProxy
     * @param {ReverseProxy} [reverseProxy] Fresh reverseproxy
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createpluginBlogRunV1alpha1ReverseProxy(
      reverseProxy?: ReverseProxy,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReverseProxy>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.createpluginBlogRunV1alpha1ReverseProxy(
          reverseProxy,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     * Delete plugin.blog.run/v1alpha1/ReverseProxy
     * @param {string} name Name of reverseproxy
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deletepluginBlogRunV1alpha1ReverseProxy(
      name: string,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.deletepluginBlogRunV1alpha1ReverseProxy(
          name,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     * Get plugin.blog.run/v1alpha1/ReverseProxy
     * @param {string} name Name of reverseproxy
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getpluginBlogRunV1alpha1ReverseProxy(
      name: string,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReverseProxy>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getpluginBlogRunV1alpha1ReverseProxy(
          name,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     * List plugin.blog.run/v1alpha1/ReverseProxy
     * @param {Array<string>} [fieldSelector] Field selector for filtering.
     * @param {Array<string>} [labelSelector] Label selector for filtering.
     * @param {number} [page] The page number. Zero indicates no page.
     * @param {number} [size] Size of one page. Zero indicates no limit.
     * @param {Array<string>} [sort] Sort property and direction of the list result. Support sorting based on attribute name path.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async listpluginBlogRunV1alpha1ReverseProxy(
      fieldSelector?: Array<string>,
      labelSelector?: Array<string>,
      page?: number,
      size?: number,
      sort?: Array<string>,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<ReverseProxyList>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.listpluginBlogRunV1alpha1ReverseProxy(
          fieldSelector,
          labelSelector,
          page,
          size,
          sort,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     * Update plugin.blog.run/v1alpha1/ReverseProxy
     * @param {string} name Name of reverseproxy
     * @param {ReverseProxy} [reverseProxy] Updated reverseproxy
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async updatepluginBlogRunV1alpha1ReverseProxy(
      name: string,
      reverseProxy?: ReverseProxy,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReverseProxy>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.updatepluginBlogRunV1alpha1ReverseProxy(
          name,
          reverseProxy,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
  };
};

/**
 * PluginBlogRunV1alpha1ReverseProxyApi - factory interface
 * @export
 */
export const PluginBlogRunV1alpha1ReverseProxyApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = PluginBlogRunV1alpha1ReverseProxyApiFp(configuration);
  return {
    /**
     * Create plugin.blog.run/v1alpha1/ReverseProxy
     * @param {PluginBlogRunV1alpha1ReverseProxyApiCreatepluginBlogRunV1alpha1ReverseProxyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createpluginBlogRunV1alpha1ReverseProxy(
      requestParameters: PluginBlogRunV1alpha1ReverseProxyApiCreatepluginBlogRunV1alpha1ReverseProxyRequest = {},
      options?: AxiosRequestConfig
    ): AxiosPromise<ReverseProxy> {
      return localVarFp
        .createpluginBlogRunV1alpha1ReverseProxy(
          requestParameters.reverseProxy,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     * Delete plugin.blog.run/v1alpha1/ReverseProxy
     * @param {PluginBlogRunV1alpha1ReverseProxyApiDeletepluginBlogRunV1alpha1ReverseProxyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deletepluginBlogRunV1alpha1ReverseProxy(
      requestParameters: PluginBlogRunV1alpha1ReverseProxyApiDeletepluginBlogRunV1alpha1ReverseProxyRequest,
      options?: AxiosRequestConfig
    ): AxiosPromise<void> {
      return localVarFp
        .deletepluginBlogRunV1alpha1ReverseProxy(
          requestParameters.name,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     * Get plugin.blog.run/v1alpha1/ReverseProxy
     * @param {PluginBlogRunV1alpha1ReverseProxyApiGetpluginBlogRunV1alpha1ReverseProxyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getpluginBlogRunV1alpha1ReverseProxy(
      requestParameters: PluginBlogRunV1alpha1ReverseProxyApiGetpluginBlogRunV1alpha1ReverseProxyRequest,
      options?: AxiosRequestConfig
    ): AxiosPromise<ReverseProxy> {
      return localVarFp
        .getpluginBlogRunV1alpha1ReverseProxy(requestParameters.name, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * List plugin.blog.run/v1alpha1/ReverseProxy
     * @param {PluginBlogRunV1alpha1ReverseProxyApiListpluginBlogRunV1alpha1ReverseProxyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listpluginBlogRunV1alpha1ReverseProxy(
      requestParameters: PluginBlogRunV1alpha1ReverseProxyApiListpluginBlogRunV1alpha1ReverseProxyRequest = {},
      options?: AxiosRequestConfig
    ): AxiosPromise<ReverseProxyList> {
      return localVarFp
        .listpluginBlogRunV1alpha1ReverseProxy(
          requestParameters.fieldSelector,
          requestParameters.labelSelector,
          requestParameters.page,
          requestParameters.size,
          requestParameters.sort,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     * Update plugin.blog.run/v1alpha1/ReverseProxy
     * @param {PluginBlogRunV1alpha1ReverseProxyApiUpdatepluginBlogRunV1alpha1ReverseProxyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updatepluginBlogRunV1alpha1ReverseProxy(
      requestParameters: PluginBlogRunV1alpha1ReverseProxyApiUpdatepluginBlogRunV1alpha1ReverseProxyRequest,
      options?: AxiosRequestConfig
    ): AxiosPromise<ReverseProxy> {
      return localVarFp
        .updatepluginBlogRunV1alpha1ReverseProxy(
          requestParameters.name,
          requestParameters.reverseProxy,
          options
        )
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * Request parameters for createpluginBlogRunV1alpha1ReverseProxy operation in PluginBlogRunV1alpha1ReverseProxyApi.
 * @export
 * @interface PluginBlogRunV1alpha1ReverseProxyApiCreatepluginBlogRunV1alpha1ReverseProxyRequest
 */
export interface PluginBlogRunV1alpha1ReverseProxyApiCreatepluginBlogRunV1alpha1ReverseProxyRequest {
  /**
   * Fresh reverseproxy
   * @type {ReverseProxy}
   * @memberof PluginBlogRunV1alpha1ReverseProxyApiCreatepluginBlogRunV1alpha1ReverseProxy
   */
  readonly reverseProxy?: ReverseProxy;
}

/**
 * Request parameters for deletepluginBlogRunV1alpha1ReverseProxy operation in PluginBlogRunV1alpha1ReverseProxyApi.
 * @export
 * @interface PluginBlogRunV1alpha1ReverseProxyApiDeletepluginBlogRunV1alpha1ReverseProxyRequest
 */
export interface PluginBlogRunV1alpha1ReverseProxyApiDeletepluginBlogRunV1alpha1ReverseProxyRequest {
  /**
   * Name of reverseproxy
   * @type {string}
   * @memberof PluginBlogRunV1alpha1ReverseProxyApiDeletepluginBlogRunV1alpha1ReverseProxy
   */
  readonly name: string;
}

/**
 * Request parameters for getpluginBlogRunV1alpha1ReverseProxy operation in PluginBlogRunV1alpha1ReverseProxyApi.
 * @export
 * @interface PluginBlogRunV1alpha1ReverseProxyApiGetpluginBlogRunV1alpha1ReverseProxyRequest
 */
export interface PluginBlogRunV1alpha1ReverseProxyApiGetpluginBlogRunV1alpha1ReverseProxyRequest {
  /**
   * Name of reverseproxy
   * @type {string}
   * @memberof PluginBlogRunV1alpha1ReverseProxyApiGetpluginBlogRunV1alpha1ReverseProxy
   */
  readonly name: string;
}

/**
 * Request parameters for listpluginBlogRunV1alpha1ReverseProxy operation in PluginBlogRunV1alpha1ReverseProxyApi.
 * @export
 * @interface PluginBlogRunV1alpha1ReverseProxyApiListpluginBlogRunV1alpha1ReverseProxyRequest
 */
export interface PluginBlogRunV1alpha1ReverseProxyApiListpluginBlogRunV1alpha1ReverseProxyRequest {
  /**
   * Field selector for filtering.
   * @type {Array<string>}
   * @memberof PluginBlogRunV1alpha1ReverseProxyApiListpluginBlogRunV1alpha1ReverseProxy
   */
  readonly fieldSelector?: Array<string>;

  /**
   * Label selector for filtering.
   * @type {Array<string>}
   * @memberof PluginBlogRunV1alpha1ReverseProxyApiListpluginBlogRunV1alpha1ReverseProxy
   */
  readonly labelSelector?: Array<string>;

  /**
   * The page number. Zero indicates no page.
   * @type {number}
   * @memberof PluginBlogRunV1alpha1ReverseProxyApiListpluginBlogRunV1alpha1ReverseProxy
   */
  readonly page?: number;

  /**
   * Size of one page. Zero indicates no limit.
   * @type {number}
   * @memberof PluginBlogRunV1alpha1ReverseProxyApiListpluginBlogRunV1alpha1ReverseProxy
   */
  readonly size?: number;

  /**
   * Sort property and direction of the list result. Support sorting based on attribute name path.
   * @type {Array<string>}
   * @memberof PluginBlogRunV1alpha1ReverseProxyApiListpluginBlogRunV1alpha1ReverseProxy
   */
  readonly sort?: Array<string>;
}

/**
 * Request parameters for updatepluginBlogRunV1alpha1ReverseProxy operation in PluginBlogRunV1alpha1ReverseProxyApi.
 * @export
 * @interface PluginBlogRunV1alpha1ReverseProxyApiUpdatepluginBlogRunV1alpha1ReverseProxyRequest
 */
export interface PluginBlogRunV1alpha1ReverseProxyApiUpdatepluginBlogRunV1alpha1ReverseProxyRequest {
  /**
   * Name of reverseproxy
   * @type {string}
   * @memberof PluginBlogRunV1alpha1ReverseProxyApiUpdatepluginBlogRunV1alpha1ReverseProxy
   */
  readonly name: string;

  /**
   * Updated reverseproxy
   * @type {ReverseProxy}
   * @memberof PluginBlogRunV1alpha1ReverseProxyApiUpdatepluginBlogRunV1alpha1ReverseProxy
   */
  readonly reverseProxy?: ReverseProxy;
}

/**
 * PluginBlogRunV1alpha1ReverseProxyApi - object-oriented interface
 * @export
 * @class PluginBlogRunV1alpha1ReverseProxyApi
 * @extends {BaseAPI}
 */
export class PluginBlogRunV1alpha1ReverseProxyApi extends BaseAPI {
  /**
   * Create plugin.blog.run/v1alpha1/ReverseProxy
   * @param {PluginBlogRunV1alpha1ReverseProxyApiCreatepluginBlogRunV1alpha1ReverseProxyRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PluginBlogRunV1alpha1ReverseProxyApi
   */
  public createpluginBlogRunV1alpha1ReverseProxy(
    requestParameters: PluginBlogRunV1alpha1ReverseProxyApiCreatepluginBlogRunV1alpha1ReverseProxyRequest = {},
    options?: AxiosRequestConfig
  ) {
    return PluginBlogRunV1alpha1ReverseProxyApiFp(this.configuration)
      .createpluginBlogRunV1alpha1ReverseProxy(
        requestParameters.reverseProxy,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Delete plugin.blog.run/v1alpha1/ReverseProxy
   * @param {PluginBlogRunV1alpha1ReverseProxyApiDeletepluginBlogRunV1alpha1ReverseProxyRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PluginBlogRunV1alpha1ReverseProxyApi
   */
  public deletepluginBlogRunV1alpha1ReverseProxy(
    requestParameters: PluginBlogRunV1alpha1ReverseProxyApiDeletepluginBlogRunV1alpha1ReverseProxyRequest,
    options?: AxiosRequestConfig
  ) {
    return PluginBlogRunV1alpha1ReverseProxyApiFp(this.configuration)
      .deletepluginBlogRunV1alpha1ReverseProxy(requestParameters.name, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Get plugin.blog.run/v1alpha1/ReverseProxy
   * @param {PluginBlogRunV1alpha1ReverseProxyApiGetpluginBlogRunV1alpha1ReverseProxyRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PluginBlogRunV1alpha1ReverseProxyApi
   */
  public getpluginBlogRunV1alpha1ReverseProxy(
    requestParameters: PluginBlogRunV1alpha1ReverseProxyApiGetpluginBlogRunV1alpha1ReverseProxyRequest,
    options?: AxiosRequestConfig
  ) {
    return PluginBlogRunV1alpha1ReverseProxyApiFp(this.configuration)
      .getpluginBlogRunV1alpha1ReverseProxy(requestParameters.name, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * List plugin.blog.run/v1alpha1/ReverseProxy
   * @param {PluginBlogRunV1alpha1ReverseProxyApiListpluginBlogRunV1alpha1ReverseProxyRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PluginBlogRunV1alpha1ReverseProxyApi
   */
  public listpluginBlogRunV1alpha1ReverseProxy(
    requestParameters: PluginBlogRunV1alpha1ReverseProxyApiListpluginBlogRunV1alpha1ReverseProxyRequest = {},
    options?: AxiosRequestConfig
  ) {
    return PluginBlogRunV1alpha1ReverseProxyApiFp(this.configuration)
      .listpluginBlogRunV1alpha1ReverseProxy(
        requestParameters.fieldSelector,
        requestParameters.labelSelector,
        requestParameters.page,
        requestParameters.size,
        requestParameters.sort,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Update plugin.blog.run/v1alpha1/ReverseProxy
   * @param {PluginBlogRunV1alpha1ReverseProxyApiUpdatepluginBlogRunV1alpha1ReverseProxyRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PluginBlogRunV1alpha1ReverseProxyApi
   */
  public updatepluginBlogRunV1alpha1ReverseProxy(
    requestParameters: PluginBlogRunV1alpha1ReverseProxyApiUpdatepluginBlogRunV1alpha1ReverseProxyRequest,
    options?: AxiosRequestConfig
  ) {
    return PluginBlogRunV1alpha1ReverseProxyApiFp(this.configuration)
      .updatepluginBlogRunV1alpha1ReverseProxy(
        requestParameters.name,
        requestParameters.reverseProxy,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }
}
