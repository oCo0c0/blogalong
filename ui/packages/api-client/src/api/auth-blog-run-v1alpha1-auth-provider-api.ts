/* tslint:disable */
/* eslint-disable */
/**
 * Blog Next API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Configuration } from "../configuration";
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from "axios";
import globalAxios from "axios";
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from "../common";
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  RequestArgs,
  BaseAPI,
  RequiredError,
} from "../base";
// @ts-ignore
import { AuthProvider } from "../models";
// @ts-ignore
import { AuthProviderList } from "../models";

/**
 * AuthBlogRunV1alpha1AuthProviderApi - axios parameter creator
 * @export
 */
export const AuthBlogRunV1alpha1AuthProviderApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     * Create auth.blog.run/v1alpha1/AuthProvider
     * @param {AuthProvider} [authProvider] Fresh authprovider
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createauthBlogRunV1alpha1AuthProvider: async (
      authProvider?: AuthProvider,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/apis/auth.blog.run/v1alpha1/authproviders`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication BasicAuth required
      // http basic authentication required
      setBasicAuthToObject(localVarRequestOptions, configuration);

      // authentication BearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        authProvider,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Delete auth.blog.run/v1alpha1/AuthProvider
     * @param {string} name Name of authprovider
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteauthBlogRunV1alpha1AuthProvider: async (
      name: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'name' is not null or undefined
      assertParamExists("deleteauthBlogRunV1alpha1AuthProvider", "name", name);
      const localVarPath =
        `/apis/auth.blog.run/v1alpha1/authproviders/{name}`.replace(
          `{${"name"}}`,
          encodeURIComponent(String(name))
        );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "DELETE",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication BasicAuth required
      // http basic authentication required
      setBasicAuthToObject(localVarRequestOptions, configuration);

      // authentication BearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Get auth.blog.run/v1alpha1/AuthProvider
     * @param {string} name Name of authprovider
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getauthBlogRunV1alpha1AuthProvider: async (
      name: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'name' is not null or undefined
      assertParamExists("getauthBlogRunV1alpha1AuthProvider", "name", name);
      const localVarPath =
        `/apis/auth.blog.run/v1alpha1/authproviders/{name}`.replace(
          `{${"name"}}`,
          encodeURIComponent(String(name))
        );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication BasicAuth required
      // http basic authentication required
      setBasicAuthToObject(localVarRequestOptions, configuration);

      // authentication BearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * List auth.blog.run/v1alpha1/AuthProvider
     * @param {Array<string>} [fieldSelector] Field selector for filtering.
     * @param {Array<string>} [labelSelector] Label selector for filtering.
     * @param {number} [page] The page number. Zero indicates no page.
     * @param {number} [size] Size of one page. Zero indicates no limit.
     * @param {Array<string>} [sort] Sort property and direction of the list result. Support sorting based on attribute name path.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listauthBlogRunV1alpha1AuthProvider: async (
      fieldSelector?: Array<string>,
      labelSelector?: Array<string>,
      page?: number,
      size?: number,
      sort?: Array<string>,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/apis/auth.blog.run/v1alpha1/authproviders`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication BasicAuth required
      // http basic authentication required
      setBasicAuthToObject(localVarRequestOptions, configuration);

      // authentication BearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      if (fieldSelector) {
        localVarQueryParameter["fieldSelector"] = fieldSelector;
      }

      if (labelSelector) {
        localVarQueryParameter["labelSelector"] = labelSelector;
      }

      if (page !== undefined) {
        localVarQueryParameter["page"] = page;
      }

      if (size !== undefined) {
        localVarQueryParameter["size"] = size;
      }

      if (sort) {
        localVarQueryParameter["sort"] = Array.from(sort);
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Update auth.blog.run/v1alpha1/AuthProvider
     * @param {string} name Name of authprovider
     * @param {AuthProvider} [authProvider] Updated authprovider
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateauthBlogRunV1alpha1AuthProvider: async (
      name: string,
      authProvider?: AuthProvider,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'name' is not null or undefined
      assertParamExists("updateauthBlogRunV1alpha1AuthProvider", "name", name);
      const localVarPath =
        `/apis/auth.blog.run/v1alpha1/authproviders/{name}`.replace(
          `{${"name"}}`,
          encodeURIComponent(String(name))
        );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication BasicAuth required
      // http basic authentication required
      setBasicAuthToObject(localVarRequestOptions, configuration);

      // authentication BearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        authProvider,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * AuthBlogRunV1alpha1AuthProviderApi - functional programming interface
 * @export
 */
export const AuthBlogRunV1alpha1AuthProviderApiFp = function (
  configuration?: Configuration
) {
  const localVarAxiosParamCreator =
    AuthBlogRunV1alpha1AuthProviderApiAxiosParamCreator(configuration);
  return {
    /**
     * Create auth.blog.run/v1alpha1/AuthProvider
     * @param {AuthProvider} [authProvider] Fresh authprovider
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createauthBlogRunV1alpha1AuthProvider(
      authProvider?: AuthProvider,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthProvider>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.createauthBlogRunV1alpha1AuthProvider(
          authProvider,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     * Delete auth.blog.run/v1alpha1/AuthProvider
     * @param {string} name Name of authprovider
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteauthBlogRunV1alpha1AuthProvider(
      name: string,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.deleteauthBlogRunV1alpha1AuthProvider(
          name,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     * Get auth.blog.run/v1alpha1/AuthProvider
     * @param {string} name Name of authprovider
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getauthBlogRunV1alpha1AuthProvider(
      name: string,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthProvider>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getauthBlogRunV1alpha1AuthProvider(
          name,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     * List auth.blog.run/v1alpha1/AuthProvider
     * @param {Array<string>} [fieldSelector] Field selector for filtering.
     * @param {Array<string>} [labelSelector] Label selector for filtering.
     * @param {number} [page] The page number. Zero indicates no page.
     * @param {number} [size] Size of one page. Zero indicates no limit.
     * @param {Array<string>} [sort] Sort property and direction of the list result. Support sorting based on attribute name path.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async listauthBlogRunV1alpha1AuthProvider(
      fieldSelector?: Array<string>,
      labelSelector?: Array<string>,
      page?: number,
      size?: number,
      sort?: Array<string>,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<AuthProviderList>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.listauthBlogRunV1alpha1AuthProvider(
          fieldSelector,
          labelSelector,
          page,
          size,
          sort,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     * Update auth.blog.run/v1alpha1/AuthProvider
     * @param {string} name Name of authprovider
     * @param {AuthProvider} [authProvider] Updated authprovider
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async updateauthBlogRunV1alpha1AuthProvider(
      name: string,
      authProvider?: AuthProvider,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthProvider>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.updateauthBlogRunV1alpha1AuthProvider(
          name,
          authProvider,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
  };
};

/**
 * AuthBlogRunV1alpha1AuthProviderApi - factory interface
 * @export
 */
export const AuthBlogRunV1alpha1AuthProviderApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = AuthBlogRunV1alpha1AuthProviderApiFp(configuration);
  return {
    /**
     * Create auth.blog.run/v1alpha1/AuthProvider
     * @param {AuthBlogRunV1alpha1AuthProviderApiCreateauthBlogRunV1alpha1AuthProviderRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createauthBlogRunV1alpha1AuthProvider(
      requestParameters: AuthBlogRunV1alpha1AuthProviderApiCreateauthBlogRunV1alpha1AuthProviderRequest = {},
      options?: AxiosRequestConfig
    ): AxiosPromise<AuthProvider> {
      return localVarFp
        .createauthBlogRunV1alpha1AuthProvider(
          requestParameters.authProvider,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     * Delete auth.blog.run/v1alpha1/AuthProvider
     * @param {AuthBlogRunV1alpha1AuthProviderApiDeleteauthBlogRunV1alpha1AuthProviderRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteauthBlogRunV1alpha1AuthProvider(
      requestParameters: AuthBlogRunV1alpha1AuthProviderApiDeleteauthBlogRunV1alpha1AuthProviderRequest,
      options?: AxiosRequestConfig
    ): AxiosPromise<void> {
      return localVarFp
        .deleteauthBlogRunV1alpha1AuthProvider(requestParameters.name, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Get auth.blog.run/v1alpha1/AuthProvider
     * @param {AuthBlogRunV1alpha1AuthProviderApiGetauthBlogRunV1alpha1AuthProviderRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getauthBlogRunV1alpha1AuthProvider(
      requestParameters: AuthBlogRunV1alpha1AuthProviderApiGetauthBlogRunV1alpha1AuthProviderRequest,
      options?: AxiosRequestConfig
    ): AxiosPromise<AuthProvider> {
      return localVarFp
        .getauthBlogRunV1alpha1AuthProvider(requestParameters.name, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * List auth.blog.run/v1alpha1/AuthProvider
     * @param {AuthBlogRunV1alpha1AuthProviderApiListauthBlogRunV1alpha1AuthProviderRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listauthBlogRunV1alpha1AuthProvider(
      requestParameters: AuthBlogRunV1alpha1AuthProviderApiListauthBlogRunV1alpha1AuthProviderRequest = {},
      options?: AxiosRequestConfig
    ): AxiosPromise<AuthProviderList> {
      return localVarFp
        .listauthBlogRunV1alpha1AuthProvider(
          requestParameters.fieldSelector,
          requestParameters.labelSelector,
          requestParameters.page,
          requestParameters.size,
          requestParameters.sort,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     * Update auth.blog.run/v1alpha1/AuthProvider
     * @param {AuthBlogRunV1alpha1AuthProviderApiUpdateauthBlogRunV1alpha1AuthProviderRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateauthBlogRunV1alpha1AuthProvider(
      requestParameters: AuthBlogRunV1alpha1AuthProviderApiUpdateauthBlogRunV1alpha1AuthProviderRequest,
      options?: AxiosRequestConfig
    ): AxiosPromise<AuthProvider> {
      return localVarFp
        .updateauthBlogRunV1alpha1AuthProvider(
          requestParameters.name,
          requestParameters.authProvider,
          options
        )
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * Request parameters for createauthBlogRunV1alpha1AuthProvider operation in AuthBlogRunV1alpha1AuthProviderApi.
 * @export
 * @interface AuthBlogRunV1alpha1AuthProviderApiCreateauthBlogRunV1alpha1AuthProviderRequest
 */
export interface AuthBlogRunV1alpha1AuthProviderApiCreateauthBlogRunV1alpha1AuthProviderRequest {
  /**
   * Fresh authprovider
   * @type {AuthProvider}
   * @memberof AuthBlogRunV1alpha1AuthProviderApiCreateauthBlogRunV1alpha1AuthProvider
   */
  readonly authProvider?: AuthProvider;
}

/**
 * Request parameters for deleteauthBlogRunV1alpha1AuthProvider operation in AuthBlogRunV1alpha1AuthProviderApi.
 * @export
 * @interface AuthBlogRunV1alpha1AuthProviderApiDeleteauthBlogRunV1alpha1AuthProviderRequest
 */
export interface AuthBlogRunV1alpha1AuthProviderApiDeleteauthBlogRunV1alpha1AuthProviderRequest {
  /**
   * Name of authprovider
   * @type {string}
   * @memberof AuthBlogRunV1alpha1AuthProviderApiDeleteauthBlogRunV1alpha1AuthProvider
   */
  readonly name: string;
}

/**
 * Request parameters for getauthBlogRunV1alpha1AuthProvider operation in AuthBlogRunV1alpha1AuthProviderApi.
 * @export
 * @interface AuthBlogRunV1alpha1AuthProviderApiGetauthBlogRunV1alpha1AuthProviderRequest
 */
export interface AuthBlogRunV1alpha1AuthProviderApiGetauthBlogRunV1alpha1AuthProviderRequest {
  /**
   * Name of authprovider
   * @type {string}
   * @memberof AuthBlogRunV1alpha1AuthProviderApiGetauthBlogRunV1alpha1AuthProvider
   */
  readonly name: string;
}

/**
 * Request parameters for listauthBlogRunV1alpha1AuthProvider operation in AuthBlogRunV1alpha1AuthProviderApi.
 * @export
 * @interface AuthBlogRunV1alpha1AuthProviderApiListauthBlogRunV1alpha1AuthProviderRequest
 */
export interface AuthBlogRunV1alpha1AuthProviderApiListauthBlogRunV1alpha1AuthProviderRequest {
  /**
   * Field selector for filtering.
   * @type {Array<string>}
   * @memberof AuthBlogRunV1alpha1AuthProviderApiListauthBlogRunV1alpha1AuthProvider
   */
  readonly fieldSelector?: Array<string>;

  /**
   * Label selector for filtering.
   * @type {Array<string>}
   * @memberof AuthBlogRunV1alpha1AuthProviderApiListauthBlogRunV1alpha1AuthProvider
   */
  readonly labelSelector?: Array<string>;

  /**
   * The page number. Zero indicates no page.
   * @type {number}
   * @memberof AuthBlogRunV1alpha1AuthProviderApiListauthBlogRunV1alpha1AuthProvider
   */
  readonly page?: number;

  /**
   * Size of one page. Zero indicates no limit.
   * @type {number}
   * @memberof AuthBlogRunV1alpha1AuthProviderApiListauthBlogRunV1alpha1AuthProvider
   */
  readonly size?: number;

  /**
   * Sort property and direction of the list result. Support sorting based on attribute name path.
   * @type {Array<string>}
   * @memberof AuthBlogRunV1alpha1AuthProviderApiListauthBlogRunV1alpha1AuthProvider
   */
  readonly sort?: Array<string>;
}

/**
 * Request parameters for updateauthBlogRunV1alpha1AuthProvider operation in AuthBlogRunV1alpha1AuthProviderApi.
 * @export
 * @interface AuthBlogRunV1alpha1AuthProviderApiUpdateauthBlogRunV1alpha1AuthProviderRequest
 */
export interface AuthBlogRunV1alpha1AuthProviderApiUpdateauthBlogRunV1alpha1AuthProviderRequest {
  /**
   * Name of authprovider
   * @type {string}
   * @memberof AuthBlogRunV1alpha1AuthProviderApiUpdateauthBlogRunV1alpha1AuthProvider
   */
  readonly name: string;

  /**
   * Updated authprovider
   * @type {AuthProvider}
   * @memberof AuthBlogRunV1alpha1AuthProviderApiUpdateauthBlogRunV1alpha1AuthProvider
   */
  readonly authProvider?: AuthProvider;
}

/**
 * AuthBlogRunV1alpha1AuthProviderApi - object-oriented interface
 * @export
 * @class AuthBlogRunV1alpha1AuthProviderApi
 * @extends {BaseAPI}
 */
export class AuthBlogRunV1alpha1AuthProviderApi extends BaseAPI {
  /**
   * Create auth.blog.run/v1alpha1/AuthProvider
   * @param {AuthBlogRunV1alpha1AuthProviderApiCreateauthBlogRunV1alpha1AuthProviderRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AuthBlogRunV1alpha1AuthProviderApi
   */
  public createauthBlogRunV1alpha1AuthProvider(
    requestParameters: AuthBlogRunV1alpha1AuthProviderApiCreateauthBlogRunV1alpha1AuthProviderRequest = {},
    options?: AxiosRequestConfig
  ) {
    return AuthBlogRunV1alpha1AuthProviderApiFp(this.configuration)
      .createauthBlogRunV1alpha1AuthProvider(
        requestParameters.authProvider,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Delete auth.blog.run/v1alpha1/AuthProvider
   * @param {AuthBlogRunV1alpha1AuthProviderApiDeleteauthBlogRunV1alpha1AuthProviderRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AuthBlogRunV1alpha1AuthProviderApi
   */
  public deleteauthBlogRunV1alpha1AuthProvider(
    requestParameters: AuthBlogRunV1alpha1AuthProviderApiDeleteauthBlogRunV1alpha1AuthProviderRequest,
    options?: AxiosRequestConfig
  ) {
    return AuthBlogRunV1alpha1AuthProviderApiFp(this.configuration)
      .deleteauthBlogRunV1alpha1AuthProvider(requestParameters.name, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Get auth.blog.run/v1alpha1/AuthProvider
   * @param {AuthBlogRunV1alpha1AuthProviderApiGetauthBlogRunV1alpha1AuthProviderRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AuthBlogRunV1alpha1AuthProviderApi
   */
  public getauthBlogRunV1alpha1AuthProvider(
    requestParameters: AuthBlogRunV1alpha1AuthProviderApiGetauthBlogRunV1alpha1AuthProviderRequest,
    options?: AxiosRequestConfig
  ) {
    return AuthBlogRunV1alpha1AuthProviderApiFp(this.configuration)
      .getauthBlogRunV1alpha1AuthProvider(requestParameters.name, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * List auth.blog.run/v1alpha1/AuthProvider
   * @param {AuthBlogRunV1alpha1AuthProviderApiListauthBlogRunV1alpha1AuthProviderRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AuthBlogRunV1alpha1AuthProviderApi
   */
  public listauthBlogRunV1alpha1AuthProvider(
    requestParameters: AuthBlogRunV1alpha1AuthProviderApiListauthBlogRunV1alpha1AuthProviderRequest = {},
    options?: AxiosRequestConfig
  ) {
    return AuthBlogRunV1alpha1AuthProviderApiFp(this.configuration)
      .listauthBlogRunV1alpha1AuthProvider(
        requestParameters.fieldSelector,
        requestParameters.labelSelector,
        requestParameters.page,
        requestParameters.size,
        requestParameters.sort,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Update auth.blog.run/v1alpha1/AuthProvider
   * @param {AuthBlogRunV1alpha1AuthProviderApiUpdateauthBlogRunV1alpha1AuthProviderRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AuthBlogRunV1alpha1AuthProviderApi
   */
  public updateauthBlogRunV1alpha1AuthProvider(
    requestParameters: AuthBlogRunV1alpha1AuthProviderApiUpdateauthBlogRunV1alpha1AuthProviderRequest,
    options?: AxiosRequestConfig
  ) {
    return AuthBlogRunV1alpha1AuthProviderApiFp(this.configuration)
      .updateauthBlogRunV1alpha1AuthProvider(
        requestParameters.name,
        requestParameters.authProvider,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }
}
